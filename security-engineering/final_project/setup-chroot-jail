#!/bin/bash

# TODO(improvements): 
#    - Use 'install' instead of 'cp' for copying binaries
#    - Implement logging
#       - Use industry standard logging format
#       - Integrate with logging tool
#           - Mount /dev/log and use logger + rsyslog? 
#           - Promtail? 
#   - Add more defense (maybe)?
#       - SELinux/AppArmor/Seccomp
#       - iptables/nftables rule to restrict jailed user to SSH only to certain hosts
#   - Use readonly bind mount?

declare CHROOT_DIR='/var/chroot'
declare JAILED_USER='juvie'
declare BASTION_HOST_IP='192.168.4.74'

declare -a BINARIES=("rbash" "ssh")

declare -a SYSFILES=(
    "/etc/passwd"
    "/etc/group"
    "/etc/nsswitch.conf"
    "/etc/hosts"
)

declare -a SPECIAL_FILES=(
    "/dev/null "
    "/dev/tty" 
    "/dev/zero"
    "/dev/random"
    "/dev/urandom"
)

declare VERBOSE=0
while [[ -n $1 ]]; do
    case $1 in
        -c|--chroot-dir)
            { [[ -n $2 && ! $2 =~ ^- ]] && shift && CHROOT_DIR=$1; } || {
                printf "\033[31m"; printf >&2 "The -c/--chroot-dir option was given with no valid argument.\n"
                exit 1
            }
            printf "Chroot directory set to %s\n" "$CHROOT_DIR"
            shift
            ;;
        -v|--verbose)
            VERBOSE=1
            shift;
            ;;
        -h|--help)
            # TODO: Add help text
            :
            ;;
    esac
done

debug() {
    [[ -n $VERBOSE ]] && printf "[\033[33m DEBUG \033[0m]: %s\n" "$@"
}

setup-chroot-dir() {

    printf "Setting up directory structure.\n"

    # sudo mkdir -p ${CHROOT_DIR}/{bin,lib,dev,etc,home,usr/bin,lib/x86_64-linux-gnu} || {
    #     printf "\033[31m"; printf >&2 "Failed to create directory tree for chroot jail!\n"
    # }

    for dir in {bin,lib,dev,etc,home,usr/bin,lib/x86_64-linux-gnu}; do
        if ! [[ -d ${CHROOT_DIR}/$dir ]]; then
            sudo mkdir -p "${CHROOT_DIR}/$dir" || {
                printf "\033[31m"; printf >&2 "Failed to create directory tree for chroot jail!\n" && return 1
            }
        else
            debug "Directory already exists, skipping: $dir"
        fi
    done

    for SYSFILE in "${SYSFILES[@]}"; do
        printf "Copying system file: %s\n" "$SYSFILE"
        if [[ ! -d  "${CHROOT_DIR}$(dirname "$SYSFILE")" ]]; then
            printf "Creating directory for %s at %s\n" "$SYSFILE" "$CHROOT_DIR/$(basename "$SYSFILE")"
            sudo mkdir -p "$(dirname "$SYSFILE")" || {
                printf "\033[31m"; printf >&2 "Failed to make directory for %s at %s\n" "$SYSFILE" "$(dirname "$SYSFILE")"
            }
        fi

        printf "Copying system file %s to %s\n" "$SYSFILE" "${CHROOT_DIR}$SYSFILE"
        sudo cp "$SYSFILE" "${CHROOT_DIR}${SYSFILE}"
    done

    # Copy over binaries and their linked libraries
    for BINARY in "${BINARIES[@]}"; do
        debug "Copying binary: ${BINARY}"
        BIN_PATH=$(which "$BINARY")
        sudo cp "$BIN_PATH" "${CHROOT_DIR}${BIN_PATH}" || {
            printf "\033[31m"; printf >&2 "Failed to copy binary (%s) to destination: %s\n" "$BINARY" "${CHROOT_DIR}${BIN_PATH}"
        }

        # Gather Link Libraries for the binary
        local -a BIN_LLIBS
        IFS=$'\n' read -r -d '' -a BIN_LLIBS < <(ldd "$BIN_PATH" |
            perl -ne 'print $1 . "\n" if s/^[^\/]*(\/.*)\(.*$/\1/')
            # grep -o '/[^ ]*'

        printf "LLIB for %s: %s\n" "$BINARY" "${BIN_LLIBS[@]}"
        for LLIB in "${BIN_LLIBS[@]}"; do
            if ! stat "${CHROOT_DIR}${LLIB}" > /dev/null 2>&1; then
                sudo cp "${LLIB}" "${CHROOT_DIR}${LLIB}" || {
                    printf "\033[31m"; printf >&2 "Failed to copy linked library (%s) to destination: %s" \
                        "$LLIB" \
                        "${CHROOT_DIR}${LLIB}"
                }
            else
                printf "Linked library exists in destination: %s. Skipping.\n" \
                    "${CHROOT_DIR}${LLIB}"
            fi
        done

    done

    # Create special files
    printf "Making character special files.\n"
    for SPECIAL_FILE in "${SPECIAL_FILES[@]}"; do
        if [[ ! -c "${CHROOT_DIR}${SPECIAL_FILE}" ]]; then
            local -a MAJOR_MINOR=()

            read -r -d '' -a MAJOR_MINOR < <(
                awk '/Device type/ {print $(NF)"\n"}' < <(stat "$SPECIAL_FILE") | tr ',' ' '
            )

            sudo mknod -m 666 "${CHROOT_DIR}${SPECIAL_FILE}" c "${MAJOR_MINOR[@]}" || { 
                printf "\033[31m"; printf >&2 "Failed to create character special file: %s\n" "${SPECIAL_FILE}";
                printf "\033[0m"
                return 1
            }

        else
            debug "Character special file already exists: ${CHROOT_DIR}${SPECIAL_FILE}"
        fi
    done

    # Copy name switch service files for network functionality
    printf "Copying Name Switch Service (NSS) files.\n"
    sudo cp -r /lib/x86_64-linux-gnu/*nss* "$CHROOT_DIR/lib/x86_64-linux-gnu" || {
        printf "\033[31m"; printf >&2 "Failed to copy name switch service files!\n"
    }

}

setup-jailed-user() {
    if [[ $(hostname -I | awk '{print $1}' | tr -d ' ') != "$BASTION_HOST_IP" ]]; then
        printf "\033[31m"; printf >&2 "Your localhost is not the targeted bastion host.\n" 
        printf "\033[0m"
        return 1
    fi
    sudo useradd -m "${JAILED_USER}" || {
        printf "\033[31m"; printf >&2 "Failed to add jailed user account!\n" 
        printf "\033[0m"
        return 1
    }
    printf "User account %s succussfully added.\n" "$JAILED_USER"

    local PASSWORD=
    read -r -s -p "Enter password for user account: " PASSWORD || {
        printf "\033[31m"; printf >&2 "Failed to read password for user: %s\n" "$JAILED_USER"
        printf "\033[0m"
    }

    printf "Setting password for user: %s\n" "${JAILED_USER}"
    printf "%s\n%s\n" "$PASSWORD" "$PASSWORD" | sudo passwd "${JAILED_USER}" || {
        printf "\033[31m"; printf >&2 "Failed to set password for user: %s\n" "$JAILED_USER" 
        printf "\033[0m"
        return 1
    }

}

configure-ssh(){
    # Set up the bastion script and rules for the jailed user
    if ! grep -qi "Match User ${JAILED_USER}" /etc/ssh/sshd_config; then
        {
	    cat <<- EOF | sudo tee -a /etc/ssh/sshd_config
		Match User $JAILED_USER
		    ChrootDirectory $CHROOT_DIR
		    PasswordAuthentication yes
		    AuthenticationMethods password
		EOF
        } || {
            printf "\033[31m"; printf >&2 "Failed to add entry for user in /etc/ssh/sshd_config!\n" 
            printf "\033[0m"
            return 1
        }
        # sudo sed -i -E "\$a Match User ${JAILED_USER}\nChrootDirectory ${CHROOT_DIR}\n" \
        #     /etc/ssh/sshd_config || {
        #     printf "\033[31m"; printf >&2 "Failed to add entry for user in /etc/ssh/sshd_config!\n" && return 1
        # }

        printf "Added ChrootDirectory rule for %s\n" "$JAILED_USER"
    else
        printf "Entry already found in /etc/ssh/sshd_config. Skipping.\n"
    fi

    printf "Restarting SSH daemon...\n"

    sudo systemctl restart ssh || {
        printf "\033[31m"; printf >&2 "Failed to restart SSH!\n"
        printf "\033[0m"
        return 1
    }

}

    
printf "Setting up chroot jail environment in: %s\n" "$CHROOT_DIR"

setup-chroot-dir || {
    printf "\033[31m"; printf >&2 "Failed to set up chroot directory!\n"; printf "\033[0m" 
    exit 1
}

printf "\033[32mSuccessfully set up chroot directory in %s\033[0m\n" "$CHROOT_DIR"
printf "Attempting to set up a user account for jailed user: %s\n" "$JAILED_USER"

setup-jailed-user || {
    printf "\033[31m"; printf >&2 "Failed to set up jailed user!\n" && exit 1
}

printf "\033[32mSuccessfully set up jailed user: %s\033[0m\n" "$JAILED_USER"
printf "Attempting to configure SSH rules for jailed user.\n"

configure-ssh || {
    printf "\033[31m"
    printf >&2 "Failed to configure ssh rules for jailed user!\n"; 
    printf "\033[0m" 
    exit 1

}

printf "\033[32mSuccessfully set up jailed user.\033[0m\n"



