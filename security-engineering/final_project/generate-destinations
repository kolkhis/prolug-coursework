#!/bin/bash
# shellcheck disable=SC2120

# Generate a list of destinations for bastion.sh
# Destination list based on a SSH config file (to be provided separately)

# TODO(feat): Allow use of an ansible inventory file (.ini, .yaml)
# TODO(feat): Allow use of /etc/hosts (use as default?)


declare SSH_CONFIG_FILE
declare INPUT_FILE
declare OUTPUT_FILE='./destinations.txt'
declare VERBOSE=1
declare -a DESTINATIONS


debug() {
    (( VERBOSE )) || return 1
    [[ -n $# ]] && printf "[ \033[34mDEBUG\033[0m ]: %s\n" "$*" && return 0
    printf "[ \033[34mDEBUG\033[0m ]: "
}

warn() {
    [[ -n $# ]] && printf "[ \033[33mWARNING\033[0m ]: %s\n" "$*" && return 0
    printf "[ \033[33mWARNING\033[0m ]: "
}

err() {
    [[ -n $# ]] && printf >&2 "[ \032[33mERROR\033[0m ]: %s\n" "$*" && return 0
    printf >&2 "[ \033[32mERROR\033[0m ]: " && return 0
}



parse-args(){
    [[ $# -eq 0 ]] && debug "No args to parse." && return 0
    while [[ -n $1 ]]; do
        case $1 in
            -o|--output-file)
                { [[ -n $2 ]] && shift && OUTPUT_FILE=$1; } || {
                    err && printf >&2 "The -f/--OUTput-file argument was given but no file specified.\n" && return 1; } 
                printf "Outputting destinations to the file: %s\n" "$OUTPUT_FILE"
                shift;
                ;;
            -f|--input-file)
                { [[ -n $2 ]] && shift && INPUT_FILE=$1; } || {
                    err && printf >&2 "The -f/--input-file argument was given but no file specified.\n" && return 1; } 
                printf "Generating destinations based on the file: %s\n" "$INPUT_FILE"
                shift
                ;;
            -c|--config-file)
                { [[ -n $2 ]] && shift && SSH_CONFIG_FILE=$1; } || {
                    err && printf >&2 "The -c/--config-file argument was given but no file specified.\n" && return 1; }
                printf "Using SSH config file: %s\n" "$SSH_CONFIG_FILE"
                shift;
                ;;
            -q|--quiet) VERBOSE=0; shift;
                ;;
            -v|--verbose) VERBOSE=1; shift;
                ;;
            -h|--help)
                printf "Usage: ./generate-destinations [-c SSH_CONFIG_FILE] [-o|--output-file FILE] [--verbose] [--quiet] \n"
                exit 0;
                ;;
            *)
                printf "Unknown argument: %s\n" "$1"
                exit 1;
                ;;
        esac
    done

    return 0
}

parse-ansible-inventory(){
    : "Reserved for future functionality."
}

parse-input-file() {
    : "This function is reserved for extending functionality in the future."
    : "Will allow for a custom input format."
}

parse-ssh-config(){
    # Parse the SSH config file to a "host user@hostname" formatted file 
    # Each line is parsed, validated to have internal IP and SSH-ready

    [[ -z $SSH_CONFIG_FILE || ! -f $SSH_CONFIG_FILE ]] && return 1

    local -a ENTRIES=()
    mapfile -t ENTRIES < <(
        awk '/^Host/ {printf "%s ", $2} /User/ {printf "%s@", $2} /Hostname/ {printf "%s\n", $2}' "$SSH_CONFIG_FILE"
    )

    [[ "${#ENTRIES[@]}" -eq 0 ]] && err "Failed to parse file (parsed input is empty)\n" && return 1

    for n in "${!ENTRIES[@]}"; do
        debug "Entry number $n: ${ENTRIES[$n]}";
        local parsed_destination=
        parsed_destination=$(perl -ne 'print "$1 $2" if m/(\w+)\s*(\w+@\d{3}\.\d{3}\.\d{1,3}\.\d{1,3})/' <<< "${ENTRIES[$n]}")
        [[ -z $parsed_destination ]] && printf "Bad entry, skipping: %s\n" "${ENTRIES[$n]}" && continue
        debug "Parsed entry: $parsed_destination"
        DESTINATIONS=("${DESTINATIONS[@]}" "$parsed_destination")
    done
    return 0
}

output-destinations(){
    printf "%s\n" "${DESTINATIONS[@]}"
}

main() {
    parse-args "$@" || {
        err "Failed to parse arguments!" && exit 1
    }

    if ! [[ -f ${SSH_CONFIG_FILE:=$HOME/.ssh/config} ]]; then
        err "There is no SSH config file at $SSH_CONFIG_FILE" 
        exit 1
    fi

    parse-ssh-config || {
        err "Failed to parse SSH config file!" && exit 1
    }

    output-destinations | sudo tee "$OUTPUT_FILE"
}

main "$@"

